package echo

import (
	as "github.com/godevsig/adaptiveservice"
)

const (
	// Publisher is the service(s) publisher
	Publisher = "example"
	// ServiceEcho is the echo service
	ServiceEcho = "echo.v1.0"
)

// Request is the message sent by client.
// Return Reply.
type Request struct {
	Msg string
	Num int32
}

// Reply is the message replied by server,
// with Num+1 and a signature of "yours echo.v1.0".
type Reply struct {
	Request
	Signature string
}

// SubWhoElseEvent is used for clients to subscribe who else event which
// reports new incoming connection to the server.
// Return 0.
type SubWhoElseEvent struct{}

// WhoElse reports all client addresses the server has so far.
// Return string.
type WhoElse struct{}

func init() {
	as.RegisterType(Request{})
	as.RegisterType(Reply{})
	as.RegisterType(SubWhoElseEvent{})
	as.RegisterType(WhoElse{})
}

//go:generate mkdir -p $GOPACKAGE
//go:generate sh -c "echo '// Code generated by original messages.go. DO NOT EDIT.\n' > $GOPACKAGE/$GOFILE"
//go:generate sh -c "grep -v go:generate $GOFILE >> $GOPACKAGE/$GOFILE"
//go:generate gopls format -w $GOPACKAGE/$GOFILE
//go:generate git add $GOPACKAGE/$GOFILE
